[
  {
    "description": "",
    "tags": [
      {
        "title": "type",
        "description": null,
        "lineNumber": 0,
        "type": {
          "type": "NameExpression",
          "name": "ol.geom.GeometryType"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 107,
        "column": 26
      },
      "end": {
        "line": 107,
        "column": 61
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 107,
          "column": 63
        },
        "end": {
          "line": 107,
          "column": 70
        }
      },
      "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/api-creator-app.js",
      "code": "type: /** @type {ol.geom.GeometryType} */ ('Point')"
    },
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      null
    ]
  },
  {
    "description": "The Shareloc object provides a namespace for all elements of Shareloc",
    "tags": [
      {
        "title": "name",
        "name": "Shareloc"
      },
      {
        "title": "kind",
        "kind": "function"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 3,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 5
        }
      },
      "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/shareloc.js",
      "code": "(function() {\n    window.Shareloc = {};\n    /**\n     * The current version of Shareloc\n     * @constant\n     * @type {String}\n     * @default\n     */\n    Shareloc.VERSION = \"0.9.0\";\n})();"
    },
    "name": "Shareloc",
    "kind": "function",
    "members": {
      "instance": [],
      "static": [
        {
          "description": "Application for the GUI based creation of Shareloc permalinks.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "lineNumber": 3,
              "name": "Shareloc.ApiCreatorApp"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Shareloc"
            },
            {
              "title": "static"
            }
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 282,
                "column": 2
              }
            },
            "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/api-creator-app.js",
            "code": "Shareloc.ApiCreatorApp = function(_map) {\n\n    var map = _map,\n        drawMarker,\n        popup;\n\n    // ensure we have updated permalinks\n    map.on('moveend', function() {\n        updatePermalinks();\n    });\n\n    // create a list entry for each layer\n    var layers = new Shareloc.Layers();\n    $.each(layers.layerList, function(lid, lobj) {\n\n        var layerObj = getMapLayerById(lid),\n            active = '';\n        if (layerObj && layerObj.getVisible()) {\n            active = 'active';\n        }\n\n        $('#layers .list-group').append(\n            '<li id=\"' + lid + '\" class=\"list-group-item ' + active + '\">' + lobj.title +\n                 '<br><span style=\"font-size: smaller;\">' + lobj.desc +\n                 '</span>' +\n            '</li>'\n        );\n    });\n\n    // TODO refactor\n    $('#layers .list-group-item').each(function() {\n        var layerId = $(this).attr('id'),\n            layerItem = $(this),\n            layerObj = getMapLayerById(layerId);\n\n        // activate a layer by click\n        $(this).click(function() {\n            var found = false;\n            var ll;\n            map.getLayers().forEach(function(layer) {\n                if(layer.get('lid') === layerId) {\n                    found = true;\n                    ll = layer;\n                }\n                layer.setVisible(false);\n            });\n            if (found === false) {\n                ll = layers.createLayerObject(layerId.replace('__', '.'));\n                map.addLayer(ll);\n            }\n            $('.active').removeClass('active');\n            layerItem.addClass('active');\n            ll.setVisible(true);\n\n            // ensure marker layer is visible\n            markerLayer.setVisible(true);\n            // raise marker layer to the top\n            map.getLayers().remove(markerLayer);\n            map.getLayers().push(markerLayer);\n\n            $('a[href=\"#layers\"]').click();\n            updatePermalinks();\n        });\n    });\n\n    // create a marker layer\n    var markerSource = new ol.source.Vector();\n    // register a handler\n    markerSource.on('addfeature', onFeatureAdd);\n    var markerLayer = new ol.layer.Vector({\n        name: 'markerlayer',\n        source: markerSource,\n        style: new ol.style.Style({\n                fill: new ol.style.Fill({\n                color: 'rgba(255, 255, 255, 0.2)'\n            }),\n            stroke: new ol.style.Stroke({\n                color: '#ffcc33',\n                width: 2\n            }),\n            image: new ol.style.Icon(({\n                anchor: [12, 41],\n                anchorXUnits: 'pixels',\n                anchorYUnits: 'pixels',\n                opacity: 0.95,\n                src: './res/img/marker.png'\n            }))\n        })\n    });\n    map.addLayer(markerLayer);\n\n    $(document).ready(function ($) {\n        // enable/disable marker draw interaction depending\n        // on the active tab in the UI\n        $('#tabs a.tool-tab').click(function( event ) {\n            event.preventDefault();\n            $(this).tab('show');\n\n            if($(this).attr('href') === '#marker') {\n                drawMarker = new ol.interaction.Draw({\n                    source: markerSource,\n                    type: /** @type {ol.geom.GeometryType} */ ('Point')\n                });\n                map.addInteraction(drawMarker);\n\n            } else {\n                map.removeInteraction(drawMarker);\n            }\n        });\n\n        // update the marker popup on typing\n        $('#popuptext').keyup(createMarkerPopup);\n\n        // toggle visibility of buutin for opening/closing the UI\n        $('.close-x-btn.close-ui').click(function() {\n            $('#sidebar').css('display', 'none');\n            $('#show-ui').css('display', 'block');\n        });\n        $('#show-ui button').click(function() {\n            $('#sidebar').css('display', 'block');\n            $('#show-ui').css('display', 'none');\n        });\n\n        // show the location of the user\n        var geolocation = new ol.Geolocation({\n            // take the projection to use from the map's view\n            projection: map.getView().getProjection()\n        });\n        var geolocOverlay;\n        $('#geolocation-btn').click(function() {\n            if(geolocation.getTracking() === true) {\n                $('#geolocation-btn').removeClass(\"btn-success\");\n                geolocation.setTracking(false);\n                map.removeLayer(geolocOverlay);\n            } else {\n                $('#geolocation-btn').addClass(\"btn-success\");\n                geolocation.setTracking(true);\n            }\n        });\n        // update map when position changes\n        geolocation.on('change', function(evt) {\n            var pos = geolocation.getPosition();\n            var positionFeature = new ol.Feature({\n                geometry: new ol.geom.Point(pos)\n            });\n            var accuracyFeature = new ol.Feature({\n                geometry: geolocation.getAccuracyGeometry()\n            });\n            if(geolocOverlay) {\n                map.removeLayer(geolocOverlay);\n            }\n            geolocOverlay = new ol.layer.Vector({\n                source: new ol.source.Vector({\n                    features: [accuracyFeature, positionFeature]\n                })\n            });\n            map.addLayer(geolocOverlay);\n            map.getView().setCenter(pos);\n        });\n\n        updatePermalinks();\n    });\n\n    /**\n     * Returns the map layer by the given layer ID (lid)\n     *\n     * @param  {String} lid the layer ID\n     * @return {ol.layer}   the layer with the given lid\n     * @private\n     */\n    function getMapLayerById(lid) {\n        var layer = null;\n        map.getLayers().forEach(function(ll) {\n            if(ll.get('lid') === lid) {\n                layer = ll;\n            }\n        });\n        return layer;\n    }\n\n    /**\n     * Handles the featureadd event of our marker layer\n     *\n     * @private\n     */\n    function onFeatureAdd(evt) {\n        if(evt.feature) {\n            drawMarkerFeat(evt.feature);\n        }\n    }\n\n    /**\n     * Draws the marker feature on the map by the given point feature\n     *\n     * @private\n     */\n    function drawMarkerFeat(markerFeat) {\n        markerSource.clear();\n        markerSource.un('addfeature', onFeatureAdd);\n        markerSource.addFeature(markerFeat);\n        markerSource.on('addfeature', onFeatureAdd);\n\n        // get the marker coordinates and transform to WGS84\n        var projMarkerCoords = ol.proj.transform(\n                markerFeat.getGeometry().getCoordinates(), 'EPSG:3857', 'EPSG:4326'),\n            x = projMarkerCoords[1],\n            y = projMarkerCoords[0];\n\n        $('#marker-x').text('LAT: ' + x);\n        $('#marker-y').text('LON: ' + y);\n\n        // create a possible marker, if the\n        // textarea is filled\n        createMarkerPopup();\n\n        // update the links when changing the marker\n        updatePermalinks();\n    }\n\n    /**\n     * Updates the Permalink information in the UI\n     *\n     * @private\n     */\n    function updatePermalinks() {\n        window.location.hash = Shareloc.Permalink.createHash(map);\n        var pl = Shareloc.Permalink.createPermalinkUrl(map);\n        $('#code #embed-pl.list-group-item a.pl-link').attr('href', pl);\n        $('#code #embed-pl.list-group-item a.pl-mail').attr('href',\n                'mailto:?body=' + encodeURIComponent(pl) + '%0D%0A%0D%0Acreated by Shareloc');\n        $('#code #embed-iframe.list-group-item').text(Shareloc.Permalink.createIframeCode(map));\n    }\n\n    /**\n     * Creates the marker popup\n     *\n     * @private\n     */\n    function createMarkerPopup() {\n        if(!popup) {\n            // Popup showing the position the user clicked\n            popup = new ol.Overlay({\n                element: document.getElementById('popup')\n            });\n            map.addOverlay(popup);\n        }\n        var element = popup.getElement();\n        // destroy the old popup\n        $(element).popover('destroy');\n\n        // exit if no text is provided\n        var popuptext = $('#popuptext').val();\n        if(!popuptext || popuptext === '') {\n            updatePermalinks();\n            return;\n        }\n        popuptext = popuptext.replace(/\\n|\\r\\n|\\r/g, \"<br>\");\n\n        var markerFeat = markerSource.getFeatures()[0];\n\n        if(markerFeat) {\n            popup.setPosition(markerFeat.getGeometry().getCoordinates());\n            // the keys are quoted to prevent renaming in ADVANCED mode.\n            $(element).popover({\n              'placement': 'top',\n              'animation': false,\n              'html': true,\n              'content': '<p>' + popuptext + '</p>'\n            });\n            $(element).popover('show');\n\n            map.popup = popup;\n\n            updatePermalinks();\n        }\n    }\n};"
          },
          "name": "Shareloc.ApiCreatorApp",
          "kind": "function",
          "memberof": "Shareloc",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "Shareloc",
            "Shareloc.ApiCreatorApp"
          ]
        },
        {
          "description": "The class holding the layer configuration object. Also offers functions to\naccess the layer objects of Shareloc.\n\nLoads the JSON configuration stored at conf/layers.json",
          "tags": [
            {
              "title": "name",
              "description": null,
              "lineNumber": 6,
              "name": "Shareloc.Layers"
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Shareloc"
            },
            {
              "title": "static"
            }
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 9,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/layers.js",
            "code": "Shareloc.Layers = function() {\n    // load the layer configuration JSON\n    $.ajax({\n        url: \"conf/layers.json\",\n        async: false,\n        context: this\n    }).done(function(jsonObj) {\n        this.layerList = jsonObj;\n    });\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.getLayerConfig = function(id) {\n    return this.layerList[id];\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.createLayerObject = function(id) {\n    var conf = this.layerList[id];\n\n    if (conf) {\n        switch (conf.type) {\n        case 'TileWMS':\n            return this.createWms(conf, id);\n        case 'OSM':\n            return this.createOsm(conf, id);\n        case 'Mapquest':\n            return this.createMapquest(conf, id);\n        case 'XYZ':\n            return this.createXyz(conf, id);\n        default:\n            break;\n        }\n    } else {\n        return this.createOsm(conf, id);\n    }\n};\n\n/**\n * Creates an OpenLayers WMS layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createWms = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.TileWMS(({\n            url: layerConf.url,\n            params: {'LAYERS': layerConf.layer, 'TILED': true},\n            attributions: [new ol.Attribution({\n                html: 'WMS &copy; ' + layerConf.attribution\n            })]\n        }))\n    });\n};\n\n/**\n * Creates an OpenLayers OSM layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createOsm = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.OSM()\n    });\n};\n\n/**\n * Creates an OpenLayers MapQuest layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createMapquest = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.MapQuest({layer: layerConf.layer})\n    });\n};\n\n/**\n * Creates an OpenLayers XYZ layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createXyz = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.XYZ({\n            attributions: [new ol.Attribution({\n                html: layerConf.attribution\n            })],\n            url: 'http://{a-c}.tile.opentopomap.org/{z}/{x}/{y}.png'\n        })\n    });\n};"
          },
          "name": "Shareloc.Layers",
          "kind": "function",
          "memberof": "Shareloc",
          "scope": "static",
          "members": {
            "instance": [
              {
                "description": "",
                "tags": [
                  {
                    "title": "name",
                    "name": "createLayerObject"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Layers"
                  },
                  {
                    "title": "instance"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 27,
                    "column": 0
                  },
                  "end": {
                    "line": 29,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 30,
                      "column": 0
                    },
                    "end": {
                      "line": 49,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/layers.js",
                  "code": "Shareloc.Layers = function() {\n    // load the layer configuration JSON\n    $.ajax({\n        url: \"conf/layers.json\",\n        async: false,\n        context: this\n    }).done(function(jsonObj) {\n        this.layerList = jsonObj;\n    });\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.getLayerConfig = function(id) {\n    return this.layerList[id];\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.createLayerObject = function(id) {\n    var conf = this.layerList[id];\n\n    if (conf) {\n        switch (conf.type) {\n        case 'TileWMS':\n            return this.createWms(conf, id);\n        case 'OSM':\n            return this.createOsm(conf, id);\n        case 'Mapquest':\n            return this.createMapquest(conf, id);\n        case 'XYZ':\n            return this.createXyz(conf, id);\n        default:\n            break;\n        }\n    } else {\n        return this.createOsm(conf, id);\n    }\n};\n\n/**\n * Creates an OpenLayers WMS layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createWms = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.TileWMS(({\n            url: layerConf.url,\n            params: {'LAYERS': layerConf.layer, 'TILED': true},\n            attributions: [new ol.Attribution({\n                html: 'WMS &copy; ' + layerConf.attribution\n            })]\n        }))\n    });\n};\n\n/**\n * Creates an OpenLayers OSM layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createOsm = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.OSM()\n    });\n};\n\n/**\n * Creates an OpenLayers MapQuest layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createMapquest = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.MapQuest({layer: layerConf.layer})\n    });\n};\n\n/**\n * Creates an OpenLayers XYZ layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createXyz = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.XYZ({\n            attributions: [new ol.Attribution({\n                html: layerConf.attribution\n            })],\n            url: 'http://{a-c}.tile.opentopomap.org/{z}/{x}/{y}.png'\n        })\n    });\n};"
                },
                "name": "createLayerObject",
                "kind": "function",
                "memberof": "Shareloc.Layers",
                "scope": "instance",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Layers",
                  "createLayerObject"
                ]
              },
              {
                "description": "",
                "tags": [
                  {
                    "title": "name",
                    "name": "getLayerConfig"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Layers"
                  },
                  {
                    "title": "instance"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 20,
                    "column": 0
                  },
                  "end": {
                    "line": 22,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 23,
                      "column": 0
                    },
                    "end": {
                      "line": 25,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/layers.js",
                  "code": "Shareloc.Layers = function() {\n    // load the layer configuration JSON\n    $.ajax({\n        url: \"conf/layers.json\",\n        async: false,\n        context: this\n    }).done(function(jsonObj) {\n        this.layerList = jsonObj;\n    });\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.getLayerConfig = function(id) {\n    return this.layerList[id];\n};\n\n/**\n *\n */\nShareloc.Layers.prototype.createLayerObject = function(id) {\n    var conf = this.layerList[id];\n\n    if (conf) {\n        switch (conf.type) {\n        case 'TileWMS':\n            return this.createWms(conf, id);\n        case 'OSM':\n            return this.createOsm(conf, id);\n        case 'Mapquest':\n            return this.createMapquest(conf, id);\n        case 'XYZ':\n            return this.createXyz(conf, id);\n        default:\n            break;\n        }\n    } else {\n        return this.createOsm(conf, id);\n    }\n};\n\n/**\n * Creates an OpenLayers WMS layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createWms = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.TileWMS(({\n            url: layerConf.url,\n            params: {'LAYERS': layerConf.layer, 'TILED': true},\n            attributions: [new ol.Attribution({\n                html: 'WMS &copy; ' + layerConf.attribution\n            })]\n        }))\n    });\n};\n\n/**\n * Creates an OpenLayers OSM layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createOsm = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.OSM()\n    });\n};\n\n/**\n * Creates an OpenLayers MapQuest layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createMapquest = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.MapQuest({layer: layerConf.layer})\n    });\n};\n\n/**\n * Creates an OpenLayers XYZ layer\n *\n * @param  {Object} layerConf layer configuration object\n * @param  {String} lid       unique layer ID\n * @return {ol.layer.Tile}    the layer object\n * @private\n */\nShareloc.Layers.prototype.createXyz = function(layerConf, lid) {\n    return new ol.layer.Tile({\n        lid: lid,\n        source: new ol.source.XYZ({\n            attributions: [new ol.Attribution({\n                html: layerConf.attribution\n            })],\n            url: 'http://{a-c}.tile.opentopomap.org/{z}/{x}/{y}.png'\n        })\n    });\n};"
                },
                "name": "getLayerConfig",
                "kind": "function",
                "memberof": "Shareloc.Layers",
                "scope": "instance",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Layers",
                  "getLayerConfig"
                ]
              }
            ],
            "static": []
          },
          "events": [],
          "path": [
            "Shareloc",
            "Shareloc.Layers"
          ]
        },
        {
          "description": "This class represents the Shareloc map API.\n\n\nIt offers functions to create a customized OpenLayers map with a base layer\nby config as well as functions to add a marker and a popup to the map.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "lineNumber": 7,
              "name": "Shareloc.MapApi"
            },
            {
              "title": "class",
              "description": null,
              "lineNumber": 8,
              "type": null,
              "name": null
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Shareloc"
            },
            {
              "title": "static"
            }
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/map-api.js",
            "code": "Shareloc.MapApi = function() {\n    this._map = null;\n    this._markerLayer = null;\n};\n\n/**\n * Creates an OpenLayers map object by the given configuration object and\n * renders it to a DIV with the ID 'map' in the DOM.\n *\n * Configuration must be in the format:\n *\n *       {\n *         X: 8.318049976895958,\n *         Y: 49.43451657605041,\n *         zoom: 14,\n *         bgLayer: \"opentopomap\",\n *         marker: \"49.43707328904662,8.306307792663572\",\n *         popupText: \"foo-popup-text\"\n *       }\n * @param  {Object} config the configuration object for the map\n * @return {ol.Map}        the created OpenLayers map\n * @memberof Shareloc.MapApi\n * @instance\n */\nShareloc.MapApi.prototype.map = function(config) {\n\n    var layers = new Shareloc.Layers();\n\n    // get the layer by the given URL param\n    var layerObject = layers.createLayerObject(params.bgLayer);\n\n    this._map = new ol.Map({\n        target: 'map',\n        layers: [\n            layerObject\n        ],\n        view: new ol.View({\n          // map will be recentered by extent on postrender\n          center: ol.proj.transform([(params.X || 0), (params.Y || 0)], 'EPSG:4326', 'EPSG:3857'),\n          zoom: (params.zoom || 2)\n        }),\n        controls: ol.control.defaults({\n            attributionOptions: ({\n                collapsible: true\n            })\n        }),\n        logo: false\n    });\n\n    return this._map;\n};\n\n/**\n * Creates a marker feature on the map at the given position.\n *\n * The position must be a comma separated String containing lat and lon, e. g.\n * \"49.43707328904662,8.306307792663572\"\n *\n * @param  {String} markerPosString the position where the marker is drawn\n * @return {ol.Feature}             the created OpenLayers marker feature\n */\nShareloc.MapApi.prototype.marker = function (markerPos) {\n    var markerPosArr = markerPos.split(\",\");\n    var axisRotateCoords = [];\n    axisRotateCoords[0] = parseFloat(markerPosArr[1]);\n    axisRotateCoords[1] = parseFloat(markerPosArr[0]);\n    var projCoords = ol.proj.transform(axisRotateCoords, 'EPSG:4326', 'EPSG:3857');\n\n    var iconFeature = new ol.Feature({\n        geometry: new ol.geom.Point(projCoords)\n    });\n\n    var iconStyle = new ol.style.Style({\n        image: new ol.style.Icon(({\n            anchor: [12, 41],\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            opacity: 0.95,\n            src: './res/img/marker.png'\n        }))\n    });\n\n    iconFeature.setStyle(iconStyle);\n\n    if (this._markerLayer === null) {\n        var markerSource = new ol.source.Vector({\n            features: [iconFeature]\n        });\n        markerLayer = new ol.layer.Vector({\n            source: markerSource\n        });\n        // add marker to map\n        this._map.addLayer(markerLayer);\n        this._markerLayer = markerLayer;\n    }\n\n    return iconFeature;\n};\n\n/**\n * Creates a popup at the given feature's position\n *\n * @param  {ol.Feature} markerFeat the marker feature to bin the popup to\n * @param  {String} popupText      the text to be shown in the popup\n */\nShareloc.MapApi.prototype.markerPopup = function(markerFeat, popupText) {\n\n    // Popup showing the position the user clicked\n    var popup = new ol.Overlay({\n        element: document.getElementById('popup')\n    });\n    this._map.addOverlay(popup);\n\n    // exit if no text is provided\n    var popuptext = popupText;\n    if(!popuptext || popuptext === '') {\n        return;\n    }\n\n    var element = popup.getElement();\n    popuptext = popuptext.replace(/\\n|\\r\\n|\\r/g, \"<br>\");\n\n    $(element).popover('destroy');\n    popup.setPosition(markerFeat.getGeometry().getCoordinates());\n    // the keys are quoted to prevent renaming in ADVANCED mode.\n    $(element).popover({\n        'placement': 'top',\n        'animation': false,\n        'html': true,\n        'content': '<p>' + popuptext + '</p>'\n    });\n    $(element).popover('show');\n\n    if(this._markerLayer !== null) {\n        // to avoid positioning issues show again when marker is completely rendered\n        this._markerLayer.on('postcompose', function(event) {\n            if (markerLayer.getVisible()) {\n                $(element).popover('show');\n            }\n        });\n    }\n};"
          },
          "name": "Shareloc.MapApi",
          "kind": "function",
          "memberof": "Shareloc",
          "scope": "static",
          "members": {
            "instance": [
              {
                "description": "Creates an OpenLayers map object by the given configuration object and\nrenders it to a DIV with the ID 'map' in the DOM.\n\nConfiguration must be in the format:\n\n      {\n        X: 8.318049976895958,\n        Y: 49.43451657605041,\n        zoom: 14,\n        bgLayer: \"opentopomap\",\n        marker: \"49.43707328904662,8.306307792663572\",\n        popupText: \"foo-popup-text\"\n      }",
                "tags": [
                  {
                    "title": "param",
                    "description": "the configuration object for the map",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "config"
                  },
                  {
                    "title": "returns",
                    "description": "the created OpenLayers map",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.MapApi",
                    "lineNumber": 16
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 17
                  },
                  {
                    "title": "name",
                    "name": "map"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 16,
                    "column": 0
                  },
                  "end": {
                    "line": 34,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 35,
                      "column": 0
                    },
                    "end": {
                      "line": 61,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/map-api.js",
                  "code": "Shareloc.MapApi = function() {\n    this._map = null;\n    this._markerLayer = null;\n};\n\n/**\n * Creates an OpenLayers map object by the given configuration object and\n * renders it to a DIV with the ID 'map' in the DOM.\n *\n * Configuration must be in the format:\n *\n *       {\n *         X: 8.318049976895958,\n *         Y: 49.43451657605041,\n *         zoom: 14,\n *         bgLayer: \"opentopomap\",\n *         marker: \"49.43707328904662,8.306307792663572\",\n *         popupText: \"foo-popup-text\"\n *       }\n * @param  {Object} config the configuration object for the map\n * @return {ol.Map}        the created OpenLayers map\n * @memberof Shareloc.MapApi\n * @instance\n */\nShareloc.MapApi.prototype.map = function(config) {\n\n    var layers = new Shareloc.Layers();\n\n    // get the layer by the given URL param\n    var layerObject = layers.createLayerObject(params.bgLayer);\n\n    this._map = new ol.Map({\n        target: 'map',\n        layers: [\n            layerObject\n        ],\n        view: new ol.View({\n          // map will be recentered by extent on postrender\n          center: ol.proj.transform([(params.X || 0), (params.Y || 0)], 'EPSG:4326', 'EPSG:3857'),\n          zoom: (params.zoom || 2)\n        }),\n        controls: ol.control.defaults({\n            attributionOptions: ({\n                collapsible: true\n            })\n        }),\n        logo: false\n    });\n\n    return this._map;\n};\n\n/**\n * Creates a marker feature on the map at the given position.\n *\n * The position must be a comma separated String containing lat and lon, e. g.\n * \"49.43707328904662,8.306307792663572\"\n *\n * @param  {String} markerPosString the position where the marker is drawn\n * @return {ol.Feature}             the created OpenLayers marker feature\n */\nShareloc.MapApi.prototype.marker = function (markerPos) {\n    var markerPosArr = markerPos.split(\",\");\n    var axisRotateCoords = [];\n    axisRotateCoords[0] = parseFloat(markerPosArr[1]);\n    axisRotateCoords[1] = parseFloat(markerPosArr[0]);\n    var projCoords = ol.proj.transform(axisRotateCoords, 'EPSG:4326', 'EPSG:3857');\n\n    var iconFeature = new ol.Feature({\n        geometry: new ol.geom.Point(projCoords)\n    });\n\n    var iconStyle = new ol.style.Style({\n        image: new ol.style.Icon(({\n            anchor: [12, 41],\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            opacity: 0.95,\n            src: './res/img/marker.png'\n        }))\n    });\n\n    iconFeature.setStyle(iconStyle);\n\n    if (this._markerLayer === null) {\n        var markerSource = new ol.source.Vector({\n            features: [iconFeature]\n        });\n        markerLayer = new ol.layer.Vector({\n            source: markerSource\n        });\n        // add marker to map\n        this._map.addLayer(markerLayer);\n        this._markerLayer = markerLayer;\n    }\n\n    return iconFeature;\n};\n\n/**\n * Creates a popup at the given feature's position\n *\n * @param  {ol.Feature} markerFeat the marker feature to bin the popup to\n * @param  {String} popupText      the text to be shown in the popup\n */\nShareloc.MapApi.prototype.markerPopup = function(markerFeat, popupText) {\n\n    // Popup showing the position the user clicked\n    var popup = new ol.Overlay({\n        element: document.getElementById('popup')\n    });\n    this._map.addOverlay(popup);\n\n    // exit if no text is provided\n    var popuptext = popupText;\n    if(!popuptext || popuptext === '') {\n        return;\n    }\n\n    var element = popup.getElement();\n    popuptext = popuptext.replace(/\\n|\\r\\n|\\r/g, \"<br>\");\n\n    $(element).popover('destroy');\n    popup.setPosition(markerFeat.getGeometry().getCoordinates());\n    // the keys are quoted to prevent renaming in ADVANCED mode.\n    $(element).popover({\n        'placement': 'top',\n        'animation': false,\n        'html': true,\n        'content': '<p>' + popuptext + '</p>'\n    });\n    $(element).popover('show');\n\n    if(this._markerLayer !== null) {\n        // to avoid positioning issues show again when marker is completely rendered\n        this._markerLayer.on('postcompose', function(event) {\n            if (markerLayer.getVisible()) {\n                $(element).popover('show');\n            }\n        });\n    }\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the configuration object for the map",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    },
                    "name": "config"
                  }
                ],
                "returns": [
                  {
                    "title": "returns",
                    "description": "the created OpenLayers map",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    }
                  }
                ],
                "memberof": "Shareloc.MapApi",
                "scope": "instance",
                "name": "map",
                "kind": "function",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.MapApi",
                  "map"
                ]
              },
              {
                "description": "Creates a marker feature on the map at the given position.\n\nThe position must be a comma separated String containing lat and lon, e. g.\n\"49.43707328904662,8.306307792663572\"",
                "tags": [
                  {
                    "title": "param",
                    "description": "the position where the marker is drawn",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    },
                    "name": "markerPosString"
                  },
                  {
                    "title": "returns",
                    "description": "the created OpenLayers marker feature",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Feature"
                    }
                  },
                  {
                    "title": "name",
                    "name": "marker"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.MapApi"
                  },
                  {
                    "title": "instance"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 63,
                    "column": 0
                  },
                  "end": {
                    "line": 71,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 72,
                      "column": 0
                    },
                    "end": {
                      "line": 108,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/map-api.js",
                  "code": "Shareloc.MapApi = function() {\n    this._map = null;\n    this._markerLayer = null;\n};\n\n/**\n * Creates an OpenLayers map object by the given configuration object and\n * renders it to a DIV with the ID 'map' in the DOM.\n *\n * Configuration must be in the format:\n *\n *       {\n *         X: 8.318049976895958,\n *         Y: 49.43451657605041,\n *         zoom: 14,\n *         bgLayer: \"opentopomap\",\n *         marker: \"49.43707328904662,8.306307792663572\",\n *         popupText: \"foo-popup-text\"\n *       }\n * @param  {Object} config the configuration object for the map\n * @return {ol.Map}        the created OpenLayers map\n * @memberof Shareloc.MapApi\n * @instance\n */\nShareloc.MapApi.prototype.map = function(config) {\n\n    var layers = new Shareloc.Layers();\n\n    // get the layer by the given URL param\n    var layerObject = layers.createLayerObject(params.bgLayer);\n\n    this._map = new ol.Map({\n        target: 'map',\n        layers: [\n            layerObject\n        ],\n        view: new ol.View({\n          // map will be recentered by extent on postrender\n          center: ol.proj.transform([(params.X || 0), (params.Y || 0)], 'EPSG:4326', 'EPSG:3857'),\n          zoom: (params.zoom || 2)\n        }),\n        controls: ol.control.defaults({\n            attributionOptions: ({\n                collapsible: true\n            })\n        }),\n        logo: false\n    });\n\n    return this._map;\n};\n\n/**\n * Creates a marker feature on the map at the given position.\n *\n * The position must be a comma separated String containing lat and lon, e. g.\n * \"49.43707328904662,8.306307792663572\"\n *\n * @param  {String} markerPosString the position where the marker is drawn\n * @return {ol.Feature}             the created OpenLayers marker feature\n */\nShareloc.MapApi.prototype.marker = function (markerPos) {\n    var markerPosArr = markerPos.split(\",\");\n    var axisRotateCoords = [];\n    axisRotateCoords[0] = parseFloat(markerPosArr[1]);\n    axisRotateCoords[1] = parseFloat(markerPosArr[0]);\n    var projCoords = ol.proj.transform(axisRotateCoords, 'EPSG:4326', 'EPSG:3857');\n\n    var iconFeature = new ol.Feature({\n        geometry: new ol.geom.Point(projCoords)\n    });\n\n    var iconStyle = new ol.style.Style({\n        image: new ol.style.Icon(({\n            anchor: [12, 41],\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            opacity: 0.95,\n            src: './res/img/marker.png'\n        }))\n    });\n\n    iconFeature.setStyle(iconStyle);\n\n    if (this._markerLayer === null) {\n        var markerSource = new ol.source.Vector({\n            features: [iconFeature]\n        });\n        markerLayer = new ol.layer.Vector({\n            source: markerSource\n        });\n        // add marker to map\n        this._map.addLayer(markerLayer);\n        this._markerLayer = markerLayer;\n    }\n\n    return iconFeature;\n};\n\n/**\n * Creates a popup at the given feature's position\n *\n * @param  {ol.Feature} markerFeat the marker feature to bin the popup to\n * @param  {String} popupText      the text to be shown in the popup\n */\nShareloc.MapApi.prototype.markerPopup = function(markerFeat, popupText) {\n\n    // Popup showing the position the user clicked\n    var popup = new ol.Overlay({\n        element: document.getElementById('popup')\n    });\n    this._map.addOverlay(popup);\n\n    // exit if no text is provided\n    var popuptext = popupText;\n    if(!popuptext || popuptext === '') {\n        return;\n    }\n\n    var element = popup.getElement();\n    popuptext = popuptext.replace(/\\n|\\r\\n|\\r/g, \"<br>\");\n\n    $(element).popover('destroy');\n    popup.setPosition(markerFeat.getGeometry().getCoordinates());\n    // the keys are quoted to prevent renaming in ADVANCED mode.\n    $(element).popover({\n        'placement': 'top',\n        'animation': false,\n        'html': true,\n        'content': '<p>' + popuptext + '</p>'\n    });\n    $(element).popover('show');\n\n    if(this._markerLayer !== null) {\n        // to avoid positioning issues show again when marker is completely rendered\n        this._markerLayer.on('postcompose', function(event) {\n            if (markerLayer.getVisible()) {\n                $(element).popover('show');\n            }\n        });\n    }\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the position where the marker is drawn",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    },
                    "name": "markerPosString"
                  }
                ],
                "returns": [
                  {
                    "title": "returns",
                    "description": "the created OpenLayers marker feature",
                    "lineNumber": 7,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Feature"
                    }
                  }
                ],
                "name": "marker",
                "kind": "function",
                "memberof": "Shareloc.MapApi",
                "scope": "instance",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.MapApi",
                  "marker"
                ]
              },
              {
                "description": "Creates a popup at the given feature's position",
                "tags": [
                  {
                    "title": "param",
                    "description": "the marker feature to bin the popup to",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Feature"
                    },
                    "name": "markerFeat"
                  },
                  {
                    "title": "param",
                    "description": "the text to be shown in the popup",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    },
                    "name": "popupText"
                  },
                  {
                    "title": "name",
                    "name": "markerPopup"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.MapApi"
                  },
                  {
                    "title": "instance"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 110,
                    "column": 0
                  },
                  "end": {
                    "line": 115,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 116,
                      "column": 0
                    },
                    "end": {
                      "line": 152,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/map-api.js",
                  "code": "Shareloc.MapApi = function() {\n    this._map = null;\n    this._markerLayer = null;\n};\n\n/**\n * Creates an OpenLayers map object by the given configuration object and\n * renders it to a DIV with the ID 'map' in the DOM.\n *\n * Configuration must be in the format:\n *\n *       {\n *         X: 8.318049976895958,\n *         Y: 49.43451657605041,\n *         zoom: 14,\n *         bgLayer: \"opentopomap\",\n *         marker: \"49.43707328904662,8.306307792663572\",\n *         popupText: \"foo-popup-text\"\n *       }\n * @param  {Object} config the configuration object for the map\n * @return {ol.Map}        the created OpenLayers map\n * @memberof Shareloc.MapApi\n * @instance\n */\nShareloc.MapApi.prototype.map = function(config) {\n\n    var layers = new Shareloc.Layers();\n\n    // get the layer by the given URL param\n    var layerObject = layers.createLayerObject(params.bgLayer);\n\n    this._map = new ol.Map({\n        target: 'map',\n        layers: [\n            layerObject\n        ],\n        view: new ol.View({\n          // map will be recentered by extent on postrender\n          center: ol.proj.transform([(params.X || 0), (params.Y || 0)], 'EPSG:4326', 'EPSG:3857'),\n          zoom: (params.zoom || 2)\n        }),\n        controls: ol.control.defaults({\n            attributionOptions: ({\n                collapsible: true\n            })\n        }),\n        logo: false\n    });\n\n    return this._map;\n};\n\n/**\n * Creates a marker feature on the map at the given position.\n *\n * The position must be a comma separated String containing lat and lon, e. g.\n * \"49.43707328904662,8.306307792663572\"\n *\n * @param  {String} markerPosString the position where the marker is drawn\n * @return {ol.Feature}             the created OpenLayers marker feature\n */\nShareloc.MapApi.prototype.marker = function (markerPos) {\n    var markerPosArr = markerPos.split(\",\");\n    var axisRotateCoords = [];\n    axisRotateCoords[0] = parseFloat(markerPosArr[1]);\n    axisRotateCoords[1] = parseFloat(markerPosArr[0]);\n    var projCoords = ol.proj.transform(axisRotateCoords, 'EPSG:4326', 'EPSG:3857');\n\n    var iconFeature = new ol.Feature({\n        geometry: new ol.geom.Point(projCoords)\n    });\n\n    var iconStyle = new ol.style.Style({\n        image: new ol.style.Icon(({\n            anchor: [12, 41],\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            opacity: 0.95,\n            src: './res/img/marker.png'\n        }))\n    });\n\n    iconFeature.setStyle(iconStyle);\n\n    if (this._markerLayer === null) {\n        var markerSource = new ol.source.Vector({\n            features: [iconFeature]\n        });\n        markerLayer = new ol.layer.Vector({\n            source: markerSource\n        });\n        // add marker to map\n        this._map.addLayer(markerLayer);\n        this._markerLayer = markerLayer;\n    }\n\n    return iconFeature;\n};\n\n/**\n * Creates a popup at the given feature's position\n *\n * @param  {ol.Feature} markerFeat the marker feature to bin the popup to\n * @param  {String} popupText      the text to be shown in the popup\n */\nShareloc.MapApi.prototype.markerPopup = function(markerFeat, popupText) {\n\n    // Popup showing the position the user clicked\n    var popup = new ol.Overlay({\n        element: document.getElementById('popup')\n    });\n    this._map.addOverlay(popup);\n\n    // exit if no text is provided\n    var popuptext = popupText;\n    if(!popuptext || popuptext === '') {\n        return;\n    }\n\n    var element = popup.getElement();\n    popuptext = popuptext.replace(/\\n|\\r\\n|\\r/g, \"<br>\");\n\n    $(element).popover('destroy');\n    popup.setPosition(markerFeat.getGeometry().getCoordinates());\n    // the keys are quoted to prevent renaming in ADVANCED mode.\n    $(element).popover({\n        'placement': 'top',\n        'animation': false,\n        'html': true,\n        'content': '<p>' + popuptext + '</p>'\n    });\n    $(element).popover('show');\n\n    if(this._markerLayer !== null) {\n        // to avoid positioning issues show again when marker is completely rendered\n        this._markerLayer.on('postcompose', function(event) {\n            if (markerLayer.getVisible()) {\n                $(element).popover('show');\n            }\n        });\n    }\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the marker feature to bin the popup to",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Feature"
                    },
                    "name": "markerFeat"
                  },
                  {
                    "title": "param",
                    "description": "the text to be shown in the popup",
                    "lineNumber": 4,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    },
                    "name": "popupText"
                  }
                ],
                "name": "markerPopup",
                "kind": "function",
                "memberof": "Shareloc.MapApi",
                "scope": "instance",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.MapApi",
                  "markerPopup"
                ]
              }
            ],
            "static": []
          },
          "events": [],
          "path": [
            "Shareloc",
            "Shareloc.MapApi"
          ]
        },
        {
          "description": "A class representing the permalink functionality of Shareloc.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "lineNumber": 3,
              "name": "Shareloc.Permalink"
            },
            {
              "title": "class",
              "description": null,
              "lineNumber": 4,
              "type": null,
              "name": null
            },
            {
              "title": "kind",
              "kind": "function"
            },
            {
              "title": "memberof",
              "description": "Shareloc"
            },
            {
              "title": "static"
            }
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 115,
                "column": 2
              }
            },
            "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
            "code": "Shareloc.Permalink = function(loc) {\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n};\n\n/**\n * Creates the Shareloc URL hash representing the state of the given map. The\n * following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *\n *\n *  The has is returned in this form\n *\n *    ```map=14/49.43451657605041/8.318049976895958&layers=opentopomap```\n *\n * @param  {ol.Map} map the map to get the hash for\n * @return {String}     the hash representing the map's state\n * @function createHash\n * @static\n */\nShareloc.Permalink.createHash = function(map) {\n    var hash = \"#map=\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid = null;\n\n    hash += map.getView().getZoom() + \"/\";\n    hash += projCenter[1] + \"/\";\n    hash += projCenter[0];\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n    });\n\n    if(!lid) {\n        lid = \"osm.base\";\n    }\n\n    hash += \"&layers=\" + lid;\n    return hash;\n};\n\n/**\n * Creates the Shareloc permalink URL representing the state of the given map.\n * The following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *   - marker position (optional)\n *   - marker popup text\n *\n *\n *  The has is returned in this form\n *\n *    ```http://myhost/share.html?zoom=14&X=8.318049976895958&Y=49.43451657605041&bgLayer=opentopomap&marker=49.43707328904662,8.306307792663572&popupText=foo-popup-text```\n *\n * @param  {ol.Map} map the map to get the permalink for\n * @return {String}     the permalink representing the map's state\n * @static\n */\nShareloc.Permalink.createPermalinkUrl = function(map) {\n    var pl = window.location.origin + window.location.pathname + \"share.html?\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid,\n        markerLayer;\n\n    pl += \"zoom=\" + map.getView().getZoom() + \"&\";\n    pl += \"X=\" + projCenter[0] + \"&\";\n    pl += \"Y=\" + projCenter[1] + \"&\";\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n\n        if (layer.get('name') === 'markerlayer') {\n            markerLayer = layer;\n        }\n    });\n\n    pl += \"bgLayer=\" + lid;\n\n    // detect a possible marker\n    if (markerLayer) {\n        var marker = markerLayer.getSource().getFeatures()[0];\n        if (marker) {\n            var markerPoint = marker.getGeometry();\n            var projMarkerCoords = ol.proj.transform(markerPoint.getCoordinates(), 'EPSG:3857', 'EPSG:4326');\n            pl += \"&marker=\" + projMarkerCoords[1] + \",\" + projMarkerCoords[0];\n        }\n        // text for a popup\n        if(map.popup) {\n            var popuptext = $('.popover-content > p').html();\n            if(popuptext && popuptext !== '') {\n                pl += \"&popupText=\" + popuptext;\n            }\n\n        }\n    }\n\n    return pl;\n};\n\n/**\n * Creates the Iframe code with the current Shareloc permalink\n * (derived by {@link #createPermalinkUrl} of the given map as source. The size\n * of the Iframe defined by the current map size.\n *\n * @param  {ol.Map} map the map to get the Iframe for\n * @return {String}     the Iframe code representing the map\n * @static\n */\nShareloc.Permalink.createIframeCode = function(map) {\n\n    var pl = Shareloc.Permalink.createPermalinkUrl(map),\n        mapSize = map.getSize(),\n        code;\n\n    code = '<iframe width=\"' + mapSize[0] + '\" height=\"' + mapSize[1] + '\" ' +\n        'frameborder=\"0\" scrolling=\"no\" ' +\n        'marginheight=\"0\" marginwidth=\"0\" ' +\n        'src=\"' + pl + '\"' +\n        'style=\"border: 0\"></iframe>';\n\n    return code;\n};"
          },
          "name": "Shareloc.Permalink",
          "kind": "function",
          "memberof": "Shareloc",
          "scope": "static",
          "members": {
            "instance": [
              {
                "description": "Returns the hash string of the underlying location.",
                "tags": [
                  {
                    "title": "returns",
                    "description": "the hash object",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "name",
                    "name": "getFullHash"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 28,
                    "column": 4
                  },
                  "end": {
                    "line": 34,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 35,
                      "column": 4
                    },
                    "end": {
                      "line": 40,
                      "column": 6
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "{\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n}"
                },
                "returns": [
                  {
                    "title": "returns",
                    "description": "the hash object",
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  }
                ],
                "memberof": "Shareloc.Permalink",
                "scope": "instance",
                "name": "getFullHash",
                "kind": "function",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "getFullHash"
                ]
              },
              {
                "description": "Returns a object representation of the hash string, e. g.:\n\n      {\n        zoom: 2,\n        X: 50.02345,\n        Y: 8.161234,\n        bgLayer: \"osm.base\"\n      }\n\nThe parameters 'X', 'Y' and 'zoom' are transformed to numbers.",
                "tags": [
                  {
                    "title": "returns",
                    "description": "object holding the key-value-pairs of the hash",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink",
                    "lineNumber": 13
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 14
                  },
                  {
                    "title": "name",
                    "name": "getHashObject"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 42,
                    "column": 4
                  },
                  "end": {
                    "line": 57,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 58,
                      "column": 4
                    },
                    "end": {
                      "line": 67,
                      "column": 6
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "{\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n}"
                },
                "returns": [
                  {
                    "title": "returns",
                    "description": "object holding the key-value-pairs of the hash",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "memberof": "Shareloc.Permalink",
                "scope": "instance",
                "name": "getHashObject",
                "kind": "function",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "getHashObject"
                ]
              },
              {
                "description": "Returns the URL parameters of the underlying location, e.g.:\n\n      {\n        X: 8.318049976895958,\n        Y: 49.43451657605041,\n        zoom: 14,\n        bgLayer: \"opentopomap\",\n        marker: \"49.43707328904662,8.306307792663572\",\n        popupText: \"foo-popup-text\"\n      }\n\nThe parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\nothers remain strings.",
                "tags": [
                  {
                    "title": "returns",
                    "description": "object holding the key-value-pairs of the URL params",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink",
                    "lineNumber": 16
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 17
                  },
                  {
                    "title": "name",
                    "name": "getParams"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 69,
                    "column": 4
                  },
                  "end": {
                    "line": 87,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 88,
                      "column": 4
                    },
                    "end": {
                      "line": 114,
                      "column": 6
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "{\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n}"
                },
                "returns": [
                  {
                    "title": "returns",
                    "description": "object holding the key-value-pairs of the URL params",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  }
                ],
                "memberof": "Shareloc.Permalink",
                "scope": "instance",
                "name": "getParams",
                "kind": "function",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "getParams"
                ]
              },
              {
                "description": "Checks if the underlying location contains a hash.",
                "tags": [
                  {
                    "title": "returns",
                    "description": null,
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Boolean"
                    }
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink",
                    "lineNumber": 4
                  },
                  {
                    "title": "instance",
                    "description": null,
                    "lineNumber": 5
                  },
                  {
                    "title": "name",
                    "name": "hasHash"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 14,
                    "column": 4
                  },
                  "end": {
                    "line": 20,
                    "column": 7
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 21,
                      "column": 4
                    },
                    "end": {
                      "line": 26,
                      "column": 6
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "{\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n}"
                },
                "returns": [
                  {
                    "title": "returns",
                    "description": null,
                    "lineNumber": 3,
                    "type": {
                      "type": "NameExpression",
                      "name": "Boolean"
                    }
                  }
                ],
                "memberof": "Shareloc.Permalink",
                "scope": "instance",
                "name": "hasHash",
                "kind": "function",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "hasHash"
                ]
              }
            ],
            "static": [
              {
                "description": "Creates the Shareloc URL hash representing the state of the given map. The\nfollowing information is taken into account:\n  - center\n  - zoom level\n  - current base layer\n\n\n The has is returned in this form\n\n   ```map=14/49.43451657605041/8.318049976895958&layers=opentopomap```",
                "tags": [
                  {
                    "title": "param",
                    "description": "the map to get the hash for",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "the hash representing the map's state",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  },
                  {
                    "title": "function",
                    "description": null,
                    "lineNumber": 14,
                    "name": "createHash"
                  },
                  {
                    "title": "static",
                    "description": null,
                    "lineNumber": 15
                  },
                  {
                    "title": "name",
                    "name": "createHash"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink"
                  },
                  {
                    "title": "static"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 117,
                    "column": 0
                  },
                  "end": {
                    "line": 133,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 134,
                      "column": 0
                    },
                    "end": {
                      "line": 156,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "Shareloc.Permalink = function(loc) {\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n};\n\n/**\n * Creates the Shareloc URL hash representing the state of the given map. The\n * following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *\n *\n *  The has is returned in this form\n *\n *    ```map=14/49.43451657605041/8.318049976895958&layers=opentopomap```\n *\n * @param  {ol.Map} map the map to get the hash for\n * @return {String}     the hash representing the map's state\n * @function createHash\n * @static\n */\nShareloc.Permalink.createHash = function(map) {\n    var hash = \"#map=\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid = null;\n\n    hash += map.getView().getZoom() + \"/\";\n    hash += projCenter[1] + \"/\";\n    hash += projCenter[0];\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n    });\n\n    if(!lid) {\n        lid = \"osm.base\";\n    }\n\n    hash += \"&layers=\" + lid;\n    return hash;\n};\n\n/**\n * Creates the Shareloc permalink URL representing the state of the given map.\n * The following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *   - marker position (optional)\n *   - marker popup text\n *\n *\n *  The has is returned in this form\n *\n *    ```http://myhost/share.html?zoom=14&X=8.318049976895958&Y=49.43451657605041&bgLayer=opentopomap&marker=49.43707328904662,8.306307792663572&popupText=foo-popup-text```\n *\n * @param  {ol.Map} map the map to get the permalink for\n * @return {String}     the permalink representing the map's state\n * @static\n */\nShareloc.Permalink.createPermalinkUrl = function(map) {\n    var pl = window.location.origin + window.location.pathname + \"share.html?\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid,\n        markerLayer;\n\n    pl += \"zoom=\" + map.getView().getZoom() + \"&\";\n    pl += \"X=\" + projCenter[0] + \"&\";\n    pl += \"Y=\" + projCenter[1] + \"&\";\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n\n        if (layer.get('name') === 'markerlayer') {\n            markerLayer = layer;\n        }\n    });\n\n    pl += \"bgLayer=\" + lid;\n\n    // detect a possible marker\n    if (markerLayer) {\n        var marker = markerLayer.getSource().getFeatures()[0];\n        if (marker) {\n            var markerPoint = marker.getGeometry();\n            var projMarkerCoords = ol.proj.transform(markerPoint.getCoordinates(), 'EPSG:3857', 'EPSG:4326');\n            pl += \"&marker=\" + projMarkerCoords[1] + \",\" + projMarkerCoords[0];\n        }\n        // text for a popup\n        if(map.popup) {\n            var popuptext = $('.popover-content > p').html();\n            if(popuptext && popuptext !== '') {\n                pl += \"&popupText=\" + popuptext;\n            }\n\n        }\n    }\n\n    return pl;\n};\n\n/**\n * Creates the Iframe code with the current Shareloc permalink\n * (derived by {@link #createPermalinkUrl} of the given map as source. The size\n * of the Iframe defined by the current map size.\n *\n * @param  {ol.Map} map the map to get the Iframe for\n * @return {String}     the Iframe code representing the map\n * @static\n */\nShareloc.Permalink.createIframeCode = function(map) {\n\n    var pl = Shareloc.Permalink.createPermalinkUrl(map),\n        mapSize = map.getSize(),\n        code;\n\n    code = '<iframe width=\"' + mapSize[0] + '\" height=\"' + mapSize[1] + '\" ' +\n        'frameborder=\"0\" scrolling=\"no\" ' +\n        'marginheight=\"0\" marginwidth=\"0\" ' +\n        'src=\"' + pl + '\"' +\n        'style=\"border: 0\"></iframe>';\n\n    return code;\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the map to get the hash for",
                    "lineNumber": 12,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  }
                ],
                "returns": [
                  {
                    "title": "returns",
                    "description": "the hash representing the map's state",
                    "lineNumber": 13,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  }
                ],
                "scope": "static",
                "name": "createHash",
                "kind": "function",
                "memberof": "Shareloc.Permalink",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "createHash"
                ]
              },
              {
                "description": "Creates the Iframe code with the current Shareloc permalink\n(derived by {@link #createPermalinkUrl} of the given map as source. The size\nof the Iframe defined by the current map size.",
                "tags": [
                  {
                    "title": "param",
                    "description": "the map to get the Iframe for",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "the Iframe code representing the map",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  },
                  {
                    "title": "static",
                    "description": null,
                    "lineNumber": 7
                  },
                  {
                    "title": "name",
                    "name": "createIframeCode"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink"
                  },
                  {
                    "title": "static"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 220,
                    "column": 0
                  },
                  "end": {
                    "line": 228,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 229,
                      "column": 0
                    },
                    "end": {
                      "line": 242,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "Shareloc.Permalink = function(loc) {\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n};\n\n/**\n * Creates the Shareloc URL hash representing the state of the given map. The\n * following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *\n *\n *  The has is returned in this form\n *\n *    ```map=14/49.43451657605041/8.318049976895958&layers=opentopomap```\n *\n * @param  {ol.Map} map the map to get the hash for\n * @return {String}     the hash representing the map's state\n * @function createHash\n * @static\n */\nShareloc.Permalink.createHash = function(map) {\n    var hash = \"#map=\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid = null;\n\n    hash += map.getView().getZoom() + \"/\";\n    hash += projCenter[1] + \"/\";\n    hash += projCenter[0];\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n    });\n\n    if(!lid) {\n        lid = \"osm.base\";\n    }\n\n    hash += \"&layers=\" + lid;\n    return hash;\n};\n\n/**\n * Creates the Shareloc permalink URL representing the state of the given map.\n * The following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *   - marker position (optional)\n *   - marker popup text\n *\n *\n *  The has is returned in this form\n *\n *    ```http://myhost/share.html?zoom=14&X=8.318049976895958&Y=49.43451657605041&bgLayer=opentopomap&marker=49.43707328904662,8.306307792663572&popupText=foo-popup-text```\n *\n * @param  {ol.Map} map the map to get the permalink for\n * @return {String}     the permalink representing the map's state\n * @static\n */\nShareloc.Permalink.createPermalinkUrl = function(map) {\n    var pl = window.location.origin + window.location.pathname + \"share.html?\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid,\n        markerLayer;\n\n    pl += \"zoom=\" + map.getView().getZoom() + \"&\";\n    pl += \"X=\" + projCenter[0] + \"&\";\n    pl += \"Y=\" + projCenter[1] + \"&\";\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n\n        if (layer.get('name') === 'markerlayer') {\n            markerLayer = layer;\n        }\n    });\n\n    pl += \"bgLayer=\" + lid;\n\n    // detect a possible marker\n    if (markerLayer) {\n        var marker = markerLayer.getSource().getFeatures()[0];\n        if (marker) {\n            var markerPoint = marker.getGeometry();\n            var projMarkerCoords = ol.proj.transform(markerPoint.getCoordinates(), 'EPSG:3857', 'EPSG:4326');\n            pl += \"&marker=\" + projMarkerCoords[1] + \",\" + projMarkerCoords[0];\n        }\n        // text for a popup\n        if(map.popup) {\n            var popuptext = $('.popover-content > p').html();\n            if(popuptext && popuptext !== '') {\n                pl += \"&popupText=\" + popuptext;\n            }\n\n        }\n    }\n\n    return pl;\n};\n\n/**\n * Creates the Iframe code with the current Shareloc permalink\n * (derived by {@link #createPermalinkUrl} of the given map as source. The size\n * of the Iframe defined by the current map size.\n *\n * @param  {ol.Map} map the map to get the Iframe for\n * @return {String}     the Iframe code representing the map\n * @static\n */\nShareloc.Permalink.createIframeCode = function(map) {\n\n    var pl = Shareloc.Permalink.createPermalinkUrl(map),\n        mapSize = map.getSize(),\n        code;\n\n    code = '<iframe width=\"' + mapSize[0] + '\" height=\"' + mapSize[1] + '\" ' +\n        'frameborder=\"0\" scrolling=\"no\" ' +\n        'marginheight=\"0\" marginwidth=\"0\" ' +\n        'src=\"' + pl + '\"' +\n        'style=\"border: 0\"></iframe>';\n\n    return code;\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the map to get the Iframe for",
                    "lineNumber": 5,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  }
                ],
                "returns": [
                  {
                    "title": "returns",
                    "description": "the Iframe code representing the map",
                    "lineNumber": 6,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  }
                ],
                "scope": "static",
                "name": "createIframeCode",
                "kind": "function",
                "memberof": "Shareloc.Permalink",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "createIframeCode"
                ]
              },
              {
                "description": "Creates the Shareloc permalink URL representing the state of the given map.\nThe following information is taken into account:\n  - center\n  - zoom level\n  - current base layer\n  - marker position (optional)\n  - marker popup text\n\n\n The has is returned in this form\n\n   ```http://myhost/share.html?zoom=14&X=8.318049976895958&Y=49.43451657605041&bgLayer=opentopomap&marker=49.43707328904662,8.306307792663572&popupText=foo-popup-text```",
                "tags": [
                  {
                    "title": "param",
                    "description": "the map to get the permalink for",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  },
                  {
                    "title": "returns",
                    "description": "the permalink representing the map's state",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  },
                  {
                    "title": "static",
                    "description": null,
                    "lineNumber": 16
                  },
                  {
                    "title": "name",
                    "name": "createPermalinkUrl"
                  },
                  {
                    "title": "kind",
                    "kind": "function"
                  },
                  {
                    "title": "memberof",
                    "description": "Shareloc.Permalink"
                  },
                  {
                    "title": "static"
                  }
                ],
                "loc": {
                  "start": {
                    "line": 158,
                    "column": 0
                  },
                  "end": {
                    "line": 175,
                    "column": 3
                  }
                },
                "context": {
                  "loc": {
                    "start": {
                      "line": 176,
                      "column": 0
                    },
                    "end": {
                      "line": 218,
                      "column": 2
                    }
                  },
                  "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/permalink.js",
                  "code": "Shareloc.Permalink = function(loc) {\n\n    var location = loc,\n        params,\n        hash,\n        hashSplitter = \"/\";\n\n    /**\n     * Checks if the underlying location contains a hash.\n     *\n     * @return {Boolean}\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.hasHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash.length !== 0;\n    };\n\n    /**\n     * Returns the hash string of the underlying location.\n     *\n     * @return {String} the hash object\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getFullHash = function() {\n        if(!hash) {\n            hash = location.hash;\n        }\n        return hash;\n    };\n\n    /**\n     * Returns a object representation of the hash string, e. g.:\n     *\n     *       {\n     *         zoom: 2,\n     *         X: 50.02345,\n     *         Y: 8.161234,\n     *         bgLayer: \"osm.base\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers.\n     *\n     * @return {Object} object holding the key-value-pairs of the hash\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getHashObject = function() {\n        var fh = this.getFullHash();\n        var fhParts = fh.split(/(.+)=(.+)\\/(.+)\\/(.+)&(.+)=(.+)/i);\n        return {\n            zoom: parseInt(fhParts[2], 10),\n            X: parseFloat(fhParts[4]),\n            Y: parseFloat(fhParts[3]),\n            bgLayer: fhParts[6]\n        };\n    };\n\n    /**\n     * Returns the URL parameters of the underlying location, e.g.:\n     *\n     *       {\n     *         X: 8.318049976895958,\n     *         Y: 49.43451657605041,\n     *         zoom: 14,\n     *         bgLayer: \"opentopomap\",\n     *         marker: \"49.43707328904662,8.306307792663572\",\n     *         popupText: \"foo-popup-text\"\n     *       }\n     *\n     * The parameters 'X', 'Y' and 'zoom' are transformed to numbers, all\n     * others remain strings.\n     *\n     * @return {Object} object holding the key-value-pairs of the URL params\n     * @memberof Shareloc.Permalink\n     * @instance\n     */\n    this.getParams = function() {\n\n        if (!params) {\n            var match,\n                pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n                search = /([^&=]+)=?([^&]*)/g,\n                decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n                query  = loc.search.substring(1);\n\n            urlParams = {};\n            /* jshint ignore:start */\n            while (match = search.exec(query))\n               urlParams[decode(match[1])] = decode(match[2]);\n            /* jshint ignore:end */\n            params = urlParams;\n        }\n        if(params.X) {\n           params.X = parseFloat(params.X);\n        }\n        if(params.Y) {\n            params.Y = parseFloat(params.Y);\n        }\n        if(params.zoom) {\n            params.zoom = parseInt(params.zoom, 10);\n        }\n        return params;\n    };\n};\n\n/**\n * Creates the Shareloc URL hash representing the state of the given map. The\n * following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *\n *\n *  The has is returned in this form\n *\n *    ```map=14/49.43451657605041/8.318049976895958&layers=opentopomap```\n *\n * @param  {ol.Map} map the map to get the hash for\n * @return {String}     the hash representing the map's state\n * @function createHash\n * @static\n */\nShareloc.Permalink.createHash = function(map) {\n    var hash = \"#map=\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid = null;\n\n    hash += map.getView().getZoom() + \"/\";\n    hash += projCenter[1] + \"/\";\n    hash += projCenter[0];\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n    });\n\n    if(!lid) {\n        lid = \"osm.base\";\n    }\n\n    hash += \"&layers=\" + lid;\n    return hash;\n};\n\n/**\n * Creates the Shareloc permalink URL representing the state of the given map.\n * The following information is taken into account:\n *   - center\n *   - zoom level\n *   - current base layer\n *   - marker position (optional)\n *   - marker popup text\n *\n *\n *  The has is returned in this form\n *\n *    ```http://myhost/share.html?zoom=14&X=8.318049976895958&Y=49.43451657605041&bgLayer=opentopomap&marker=49.43707328904662,8.306307792663572&popupText=foo-popup-text```\n *\n * @param  {ol.Map} map the map to get the permalink for\n * @return {String}     the permalink representing the map's state\n * @static\n */\nShareloc.Permalink.createPermalinkUrl = function(map) {\n    var pl = window.location.origin + window.location.pathname + \"share.html?\",\n        center = map.getView().getCenter(),\n        projCenter = ol.proj.transform(center, 'EPSG:3857', 'EPSG:4326'),\n        lid,\n        markerLayer;\n\n    pl += \"zoom=\" + map.getView().getZoom() + \"&\";\n    pl += \"X=\" + projCenter[0] + \"&\";\n    pl += \"Y=\" + projCenter[1] + \"&\";\n\n    map.getLayers().forEach(function(layer) {\n        if (layer.getVisible() && layer.get('lid')) {\n            lid = layer.get('lid');\n        }\n\n        if (layer.get('name') === 'markerlayer') {\n            markerLayer = layer;\n        }\n    });\n\n    pl += \"bgLayer=\" + lid;\n\n    // detect a possible marker\n    if (markerLayer) {\n        var marker = markerLayer.getSource().getFeatures()[0];\n        if (marker) {\n            var markerPoint = marker.getGeometry();\n            var projMarkerCoords = ol.proj.transform(markerPoint.getCoordinates(), 'EPSG:3857', 'EPSG:4326');\n            pl += \"&marker=\" + projMarkerCoords[1] + \",\" + projMarkerCoords[0];\n        }\n        // text for a popup\n        if(map.popup) {\n            var popuptext = $('.popover-content > p').html();\n            if(popuptext && popuptext !== '') {\n                pl += \"&popupText=\" + popuptext;\n            }\n\n        }\n    }\n\n    return pl;\n};\n\n/**\n * Creates the Iframe code with the current Shareloc permalink\n * (derived by {@link #createPermalinkUrl} of the given map as source. The size\n * of the Iframe defined by the current map size.\n *\n * @param  {ol.Map} map the map to get the Iframe for\n * @return {String}     the Iframe code representing the map\n * @static\n */\nShareloc.Permalink.createIframeCode = function(map) {\n\n    var pl = Shareloc.Permalink.createPermalinkUrl(map),\n        mapSize = map.getSize(),\n        code;\n\n    code = '<iframe width=\"' + mapSize[0] + '\" height=\"' + mapSize[1] + '\" ' +\n        'frameborder=\"0\" scrolling=\"no\" ' +\n        'marginheight=\"0\" marginwidth=\"0\" ' +\n        'src=\"' + pl + '\"' +\n        'style=\"border: 0\"></iframe>';\n\n    return code;\n};"
                },
                "params": [
                  {
                    "title": "param",
                    "description": "the map to get the permalink for",
                    "lineNumber": 14,
                    "type": {
                      "type": "NameExpression",
                      "name": "ol.Map"
                    },
                    "name": "map"
                  }
                ],
                "returns": [
                  {
                    "title": "returns",
                    "description": "the permalink representing the map's state",
                    "lineNumber": 15,
                    "type": {
                      "type": "NameExpression",
                      "name": "String"
                    }
                  }
                ],
                "scope": "static",
                "name": "createPermalinkUrl",
                "kind": "function",
                "memberof": "Shareloc.Permalink",
                "members": {
                  "instance": [],
                  "static": []
                },
                "events": [],
                "path": [
                  "Shareloc",
                  "Shareloc.Permalink",
                  "createPermalinkUrl"
                ]
              }
            ]
          },
          "events": [],
          "path": [
            "Shareloc",
            "Shareloc.Permalink"
          ]
        },
        {
          "description": "The current version of Shareloc",
          "tags": [
            {
              "title": "constant",
              "description": null,
              "lineNumber": 2,
              "type": null,
              "name": null
            },
            {
              "title": "type",
              "description": null,
              "lineNumber": 4,
              "type": {
                "type": "NameExpression",
                "name": "String"
              }
            },
            {
              "title": "default",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "name",
              "name": "VERSION"
            },
            {
              "title": "kind",
              "kind": "constant"
            },
            {
              "title": "memberof",
              "description": "Shareloc"
            },
            {
              "title": "static"
            }
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 31
              }
            },
            "file": "/media/meggs/win-shared/linux-mint/eclipse-ws/shareloc/src/shareloc.js",
            "code": "{\n    window.Shareloc = {};\n    /**\n     * The current version of Shareloc\n     * @constant\n     * @type {String}\n     * @default\n     */\n    Shareloc.VERSION = \"0.9.0\";\n}"
          },
          "name": "VERSION",
          "kind": "constant",
          "memberof": "Shareloc",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "Shareloc",
            "VERSION"
          ]
        }
      ]
    },
    "events": [],
    "path": [
      "Shareloc"
    ]
  }
]